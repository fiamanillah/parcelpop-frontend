import { useState, useEffect } from 'react';
import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
import { useNavigate } from 'react-router';
import ReactConfetti from 'react-confetti';

const CheckoutPage = ({ parcelId, amount }) => {
    const stripe = useStripe();
    const elements = useElements();
    const navigate = useNavigate();
    const [paymentSuccess, setPaymentSuccess] = useState(false);
    const [clientSecret, setClientSecret] = useState(null);

    useEffect(() => {
        if (!stripe || !elements) return;

        // For frontend-only payment (simulating payment intent creation)
        const generateClientSecret = async () => {
            // Simulate creating a payment intent on the frontend by using a fixed amount
            // This can be replaced with an actual call to your backend later
            const response = {
                data: {
                    clientSecret: 'your-client-secret', // Use a valid client secret generated by Stripe
                },
            };
            setClientSecret(response.data.clientSecret);
        };

        generateClientSecret();
    }, [stripe, elements]);

    const handlePayment = async event => {
        event.preventDefault();
        if (!stripe || !elements || !clientSecret) return;

        const cardElement = elements.getElement(CardElement);

        try {
            // Confirm the payment using the clientSecret (frontend-only simulation)
            const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: cardElement,
                },
            });

            if (error) {
                console.error('Payment Error:', error);
            } else if (paymentIntent.status === 'succeeded') {
                setPaymentSuccess(true);
                // Redirect to payment success page after 2 seconds
                setTimeout(() => {
                    navigate(`/payment-success/${parcelId}`);
                }, 2000);
            }
        } catch (error) {
            console.error('Error processing payment:', error);
        }
    };

    return (
        <div>
            {paymentSuccess && <ReactConfetti />}
            <h1>Parcel Payment</h1>
            <form onSubmit={handlePayment}>
                <CardElement />
                <button type="submit" disabled={!stripe || !clientSecret}>
                    Pay Now
                </button>
            </form>
        </div>
    );
};

export default CheckoutPage;
